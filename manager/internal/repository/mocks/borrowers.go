// Code generated by MockGen. DO NOT EDIT.
// Source: borrowers.go
//
// Generated by this command:
//
//	mockgen -source borrowers.go -destination mocks/borrowers.go --package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dbmodels "github.com/csokviktor/qwbSfwVEyB/manager/internal/repository/dbmodels"
	gomock "go.uber.org/mock/gomock"
)

// MockBorrowers is a mock of Borrowers interface.
type MockBorrowers struct {
	ctrl     *gomock.Controller
	recorder *MockBorrowersMockRecorder
	isgomock struct{}
}

// MockBorrowersMockRecorder is the mock recorder for MockBorrowers.
type MockBorrowersMockRecorder struct {
	mock *MockBorrowers
}

// NewMockBorrowers creates a new mock instance.
func NewMockBorrowers(ctrl *gomock.Controller) *MockBorrowers {
	mock := &MockBorrowers{ctrl: ctrl}
	mock.recorder = &MockBorrowersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBorrowers) EXPECT() *MockBorrowersMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBorrowers) Create(arg0 context.Context, arg1 *dbmodels.Borrower) (*dbmodels.Borrower, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*dbmodels.Borrower)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBorrowersMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBorrowers)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockBorrowers) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBorrowersMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBorrowers)(nil).Delete), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockBorrowers) GetAll(arg0 context.Context) ([]dbmodels.Borrower, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]dbmodels.Borrower)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockBorrowersMockRecorder) GetAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockBorrowers)(nil).GetAll), arg0)
}

// GetByID mocks base method.
func (m *MockBorrowers) GetByID(arg0 context.Context, arg1 string) (*dbmodels.Borrower, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*dbmodels.Borrower)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockBorrowersMockRecorder) GetByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBorrowers)(nil).GetByID), arg0, arg1)
}

// Update mocks base method.
func (m *MockBorrowers) Update(arg0 context.Context, arg1 *dbmodels.Borrower) (*dbmodels.Borrower, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*dbmodels.Borrower)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBorrowersMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBorrowers)(nil).Update), arg0, arg1)
}
