// Code generated by MockGen. DO NOT EDIT.
// Source: books.go
//
// Generated by this command:
//
//	mockgen -source books.go -destination mocks/books.go --package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dbmodels "github.com/csokviktor/qwbSfwVEyB/manager/internal/repository/dbmodels"
	gomock "go.uber.org/mock/gomock"
)

// MockBooks is a mock of Books interface.
type MockBooks struct {
	ctrl     *gomock.Controller
	recorder *MockBooksMockRecorder
	isgomock struct{}
}

// MockBooksMockRecorder is the mock recorder for MockBooks.
type MockBooksMockRecorder struct {
	mock *MockBooks
}

// NewMockBooks creates a new mock instance.
func NewMockBooks(ctrl *gomock.Controller) *MockBooks {
	mock := &MockBooks{ctrl: ctrl}
	mock.recorder = &MockBooksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBooks) EXPECT() *MockBooksMockRecorder {
	return m.recorder
}

// Borrow mocks base method.
func (m *MockBooks) Borrow(ctx context.Context, borrowerID, bookID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Borrow", ctx, borrowerID, bookID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Borrow indicates an expected call of Borrow.
func (mr *MockBooksMockRecorder) Borrow(ctx, borrowerID, bookID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Borrow", reflect.TypeOf((*MockBooks)(nil).Borrow), ctx, borrowerID, bookID)
}

// Create mocks base method.
func (m *MockBooks) Create(ctx context.Context, newBook *dbmodels.Book) (*dbmodels.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, newBook)
	ret0, _ := ret[0].(*dbmodels.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBooksMockRecorder) Create(ctx, newBook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBooks)(nil).Create), ctx, newBook)
}

// GetAll mocks base method.
func (m *MockBooks) GetAll(ctx context.Context) ([]dbmodels.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]dbmodels.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockBooksMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockBooks)(nil).GetAll), ctx)
}
