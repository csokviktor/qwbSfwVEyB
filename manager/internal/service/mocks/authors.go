// Code generated by MockGen. DO NOT EDIT.
// Source: authors.go
//
// Generated by this command:
//
//	mockgen -source authors.go -destination mocks/authors.go --package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dbmodels "github.com/csokviktor/lib_manager/internal/repository/dbmodels"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthors is a mock of Authors interface.
type MockAuthors struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorsMockRecorder
	isgomock struct{}
}

// MockAuthorsMockRecorder is the mock recorder for MockAuthors.
type MockAuthorsMockRecorder struct {
	mock *MockAuthors
}

// NewMockAuthors creates a new mock instance.
func NewMockAuthors(ctrl *gomock.Controller) *MockAuthors {
	mock := &MockAuthors{ctrl: ctrl}
	mock.recorder = &MockAuthorsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthors) EXPECT() *MockAuthorsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAuthors) Create(ctx context.Context, newAuthor *dbmodels.Author) (*dbmodels.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, newAuthor)
	ret0, _ := ret[0].(*dbmodels.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAuthorsMockRecorder) Create(ctx, newAuthor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthors)(nil).Create), ctx, newAuthor)
}

// GetAll mocks base method.
func (m *MockAuthors) GetAll(ctx context.Context) ([]dbmodels.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]dbmodels.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAuthorsMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAuthors)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockAuthors) GetByID(ctx context.Context, id string) (*dbmodels.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*dbmodels.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAuthorsMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAuthors)(nil).GetByID), ctx, id)
}
